import configparser
import random

import requests
import sqlalchemy
from sqlalchemy.orm import sessionmaker
from telebot import types, TeleBot, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

from BD import Users, Users_words, Words
from BD import create_tables, add_base_word


config = configparser.ConfigParser()
config.read('data.ini')
token_bot = config['tlg']['token']
username_bd = config['bd_postgres']['user']
password_bd = config['bd_postgres']['password']
name_bd = config['bd_postgres']['namebd']
token_ya = config['Ya']['token']


url = 'https://dictionary.yandex.net/api/v1/dicservice.json/lookup'
DSN = f"postgresql://{username_bd}:{password_bd}@localhost:5432/{name_bd}"

engine = sqlalchemy.create_engine(DSN)
Session = sessionmaker(bind=engine)
session = Session()
create_tables(engine)
add_base_word()

print('Start telegram bot...')


state_storage = StateMemoryStorage()
bot = TeleBot(token_bot, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–∞—Ä—ã –∑–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥
    """
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    if uid in userStep:
        return userStep[uid]
    else:
        known_users.append(uid)
        userStep[uid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return 0


@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ä—Ç–æ—á–µ–∫-—Å–ª–æ–≤, —Ç–∞–∫ –∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
    –∏—Ö –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Users, –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤ –±–∞–∑–æ–≤—ã–º–∏
    –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    """
    cid = message.chat.id
    known_users_bd = session.query(Users.cid).filter(Users.cid == cid).all()
    if not known_users_bd:
        userStep[cid] = 0
        session.add(Users(cid=cid))
        session.commit()
        add_base_word_for_user(message)
        bot.send_message(cid, "–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. "\
                            '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n'\
                            '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä,'\
                            ' –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. '\
                            '–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø—Ä–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n'\
                            '\t - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n\t - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è')
    markup = types.ReplyKeyboardMarkup(row_width=2)
    global buttons
    buttons = []
    n = session.query(Users.id).filter(Users.cid == cid).all()[0][0]
    quer_word = session.query(Words.target_word).\
        join(Users_words, Users_words.wid == Words.id).\
        filter(Users_words.uid == n).all()
    target_word = random.sample(quer_word, k=1)[0][0]
    translate = session.query(Words.translate_word).\
        filter(Words.target_word == target_word).all()[0][0]
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    quer_word_random = session.query(Words.target_word).filter(Words.target_word != target_word).all()
    others = random.sample(quer_word_random, k=3)
    other_words_btns = [types.KeyboardButton(word[0]) for word in others]
    buttons.extend(other_words_btns)
    random.shuffle(buttons)
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])

    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


def add_base_word_for_user(message):
    """
    –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Å–ª–æ–≤
    """
    cid = message.chat.id
    n = session.query(Users.id).filter(Users.cid == cid).all()[0][0]
    user_words = [Users_words(uid=n, wid=i) for i in range(1, 11)]
    session.add_all(user_words)
    session.commit()


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏, –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ Command.NEXT
    """
    create_cards(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞–ª–µ–ª—å—Å–∫–æ–π –ë–î
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        cid = message.chat.id
        word = data['target_word']
        n = session.query(Users.id).filter(Users.cid == cid).all()[0][0]
        w = session.query(Words.id).filter(Words.target_word == word).all()[0][0]
        session.query(Users_words).filter(Users_words.wid == w and Users_words.uid == n).delete()
        session.commit()


@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def step1(message):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –±–∞–∑—É –Ω–æ–≤—ã—Ö —Å–ª–æ–≤,
    –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ step2
    """
    cid = message.chat.id
    userStep[cid] = 1
    bot.send_message(cid, '–≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ')
    bot.register_next_step_handler(message, step2)


def step2(message):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –±–∞–∑—É –Ω–æ–≤—ã—Ö —Å–ª–æ–≤,
    –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –µ–≥–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ translate_word()
    –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–∞–∑—É –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ñ—É–Ω–∫—Ü–∏–∏ add_word1()
    """
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        cid = message.chat.id
        word1 = message.text.lower()
        translate_word1 = translate_word(word1)
        add_word1(word1, translate_word1, cid)
        data['target_word'] = word1
        data['translate_word'] = translate_word1
        bot.send_message(cid, show_hint('–∑–∞–ø–∏—Å–∞–Ω–∞ –ø–∞—Ä–∞', show_target(data)))


def add_word1(word1, translate_word1, cid):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –±–∞–∑—É –Ω–æ–≤—ã—Ö —Å–ª–æ–≤,
    –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ –≤ –æ–±—â–µ–π –±–∞–∑–µ, –µ—Å–ª–∏ —Å–ª–æ–≤–∞ –≤ –æ–±—â–µ–π –±–∞–∑–µ –Ω–µ—Ç,
    –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Words. –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç —Å–ª–æ–≤–æ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    n = session.query(Users.id).filter(Users.cid == cid).all()[0][0]
    base_words = session.query(Words.target_word).all()
    if (word1,) not in base_words:
        session.add(Words(target_word=word1, translate_word=translate_word1))
        session.commit()
    w = session.query(Words.id).filter(Words.target_word == word1).all()[0][0]
    session.add(Users_words(uid=n, wid=w))
    session.commit()


def translate_word(word):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –Ø–Ω–¥–µ–∫—Å-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
    """
    trans_word_json = requests.get(url+f'?key={token_ya}&lang=en-ru&text={word}').json()
    trans_word = trans_word_json['def'][0]['tr'][0]['text']
    return trans_word


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞, –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ - –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ—Ç,
    –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º - –¥–∞–µ—Ç –µ—â–µ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É
    """
    text = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!",
                             f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


bot.add_custom_filter(custom_filters.StateFilter(bot))

bot.infinity_polling(skip_pending=True)
